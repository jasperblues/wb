//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 17 images.
  struct image {
    /// Image `island`.
    static let island = Rswift.ImageResource(bundle: R.hostingBundle, name: "island")
    /// Image `ratingAV`.
    static let ratingAV = Rswift.ImageResource(bundle: R.hostingBundle, name: "ratingAV")
    /// Image `ratingG`.
    static let ratingG = Rswift.ImageResource(bundle: R.hostingBundle, name: "ratingG")
    /// Image `ratingMA`.
    static let ratingMA = Rswift.ImageResource(bundle: R.hostingBundle, name: "ratingMA")
    /// Image `ratingM`.
    static let ratingM = Rswift.ImageResource(bundle: R.hostingBundle, name: "ratingM")
    /// Image `ratingNR`.
    static let ratingNR = Rswift.ImageResource(bundle: R.hostingBundle, name: "ratingNR")
    /// Image `ratingPG`.
    static let ratingPG = Rswift.ImageResource(bundle: R.hostingBundle, name: "ratingPG")
    /// Image `station10`.
    static let station10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "station10")
    /// Image `station7Mate`.
    static let station7Mate = Rswift.ImageResource(bundle: R.hostingBundle, name: "station7Mate")
    /// Image `station7Two`.
    static let station7Two = Rswift.ImageResource(bundle: R.hostingBundle, name: "station7Two")
    /// Image `stationABC1`.
    static let stationABC1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "stationABC1")
    /// Image `stationEleven`.
    static let stationEleven = Rswift.ImageResource(bundle: R.hostingBundle, name: "stationEleven")
    /// Image `stationNine`.
    static let stationNine = Rswift.ImageResource(bundle: R.hostingBundle, name: "stationNine")
    /// Image `stationONE`.
    static let stationONE = Rswift.ImageResource(bundle: R.hostingBundle, name: "stationONE")
    /// Image `stationSBS1`.
    static let stationSBS1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "stationSBS1")
    /// Image `stationSBS2`.
    static let stationSBS2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "stationSBS2")
    /// Image `stationSeven`.
    static let stationSeven = Rswift.ImageResource(bundle: R.hostingBundle, name: "stationSeven")
    
    /// `UIImage(named: "island", bundle: ..., traitCollection: ...)`
    static func island(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.island, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ratingAV", bundle: ..., traitCollection: ...)`
    static func ratingAV(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ratingAV, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ratingG", bundle: ..., traitCollection: ...)`
    static func ratingG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ratingG, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ratingM", bundle: ..., traitCollection: ...)`
    static func ratingM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ratingM, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ratingMA", bundle: ..., traitCollection: ...)`
    static func ratingMA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ratingMA, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ratingNR", bundle: ..., traitCollection: ...)`
    static func ratingNR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ratingNR, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ratingPG", bundle: ..., traitCollection: ...)`
    static func ratingPG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ratingPG, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "station10", bundle: ..., traitCollection: ...)`
    static func station10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.station10, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "station7Mate", bundle: ..., traitCollection: ...)`
    static func station7Mate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.station7Mate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "station7Two", bundle: ..., traitCollection: ...)`
    static func station7Two(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.station7Two, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "stationABC1", bundle: ..., traitCollection: ...)`
    static func stationABC1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stationABC1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "stationEleven", bundle: ..., traitCollection: ...)`
    static func stationEleven(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stationEleven, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "stationNine", bundle: ..., traitCollection: ...)`
    static func stationNine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stationNine, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "stationONE", bundle: ..., traitCollection: ...)`
    static func stationONE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stationONE, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "stationSBS1", bundle: ..., traitCollection: ...)`
    static func stationSBS1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stationSBS1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "stationSBS2", bundle: ..., traitCollection: ...)`
    static func stationSBS2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stationSBS2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "stationSeven", bundle: ..., traitCollection: ...)`
    static func stationSeven(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stationSeven, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `ListingView`.
    static let listingView = _R.nib._ListingView()
    /// Nib `ProgramDetailView`.
    static let programDetailView = _R.nib._ProgramDetailView()
    
    /// `UINib(name: "ListingView", in: bundle)`
    static func listingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.listingView)
    }
    
    /// `UINib(name: "ProgramDetailView", in: bundle)`
    static func programDetailView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.programDetailView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ProgramDetailView.validate()
    }
    
    struct _ListingView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ListingView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ProgramDetailView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProgramDetailView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ratingAV") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ratingAV' is used in nib 'ProgramDetailView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "island") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'island' is used in nib 'ProgramDetailView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}